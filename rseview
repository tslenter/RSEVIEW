#!/bin/bash
#License:
#"Remote Syslog" is a free application what can be used to view syslog messages.
#Copyright (C) 2022 Tom Slenter
#
#This program is free software: you can redistribute it and/or modify
#it under the terms of the GNU General Public License as published by
#the Free Software Foundation, either version 3 of the License.
#
#This program is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
#GNU General Public License for more details.
#
#You should have received a copy of the GNU General Public License
#along with this program. If not, see <http://www.gnu.org/licenses/>.
#
#For more information contact the author:
#Name author: Tom Slenter
#E-mail: info@remotesyslog.com
#Banner
function banner() {
    echo ""
    echo "##################################################"
    echo "#Remote Syslog Elasticsearch Viewer              #"
    echo "#More information: https://www.remotesyslog.com  #"
    echo "#Remote Syslog viewer for Elasticsearch          #"
    echo "#Version: RSEVIEW 0.1                            #"
    echo "#Donations: https://github.com/tslenter/rseview  #"
    echo "##################################################"
    echo ""
}
#Variables
default_buffer=50
RSCONF=/opt/RSEVIEW
banner

function usage() {
   echo "Disk usage:"
   df -h
   echo "Ram usage:"
   free -h
}

function lc_policy_rc() {
   urlstatus="$(curl --fail --silent -XGET http://localhost:9200/_ilm/status -I | egrep 200)"
   if [[ $urlstatus =~ "200" ]]; then
      echo "Elasticsearch service is running ..."
   else
      echo "Elasticsearch not running? Please check the Elasticsearch service ..."
      exit
   fi
   echo "Deployed lifecycle policy ..."
   curl --fail --silent -XGET --header 'Content-Type: application/json' http://localhost:9200/rse-*/_ilm/explain?pretty
   echo "Configured lifecycle policy ..."
   curl --fail --silent -XGET --header 'Cent-Type: application/json' http://localhost:9200/_ilm/policy/rs-policy | jq '.[] | .policy'
}

function lc_policy() {
   urlstatus="$(curl --fail --silent -XGET http://localhost:9200/_ilm/status -I | egrep 200)"
   if [[ $urlstatus =~ "200" ]]; then
      echo "Elasticsearch service is running ..."
   else
      echo "Elasticsearch not in time activated? Use CLI to setup the lifecycle ..."
      exit
   fi
   echo "Set new lifecycle policy ..."
   read -p "Change amount in GB to new value (numbers only): " gb
   read -p "Change amount in days for rollover (numbers only): " days
   read -p "Change amount in days for deletion (numbers only): " days2
   if [ -z "$gb" ]; then
      echo "No gb variable detected ..."
      exit
   fi
   if [ -z "$days" ]; then
      echo "No days variable detected ..."
      exit
   fi
   if [ -z "$days2" ]; then
      echo "No days variable detected ..."
      exit
   fi
   if [[ $days == ?(-)+([0-9]) ]]; then
      echo "Continue ..."
   else
      echo "Days is no number ..."
      exit
   fi
   if [[ $days2 == ?(-)+([0-9]) ]]; then
      echo "Continue ..."
   else
      echo "Days is no number ..."
      exit
   fi
   if [[ $gb == ?(-)+([0-9]) ]]; then
      echo "Continue ..."
   else
      echo "Max shard size is no number ..."
      exit
   fi
   days+="d"
   gb+="gb"
   days2+="d"
   curl -XPUT --header 'Content-Type: application/json' http://localhost:9200/_ilm/policy/rs-policy?pretty=true --data '
   {
    "policy": {
      "phases": {
        "hot": {
          "min_age": "0ms",
          "actions": {
            "rollover": {
              "max_primary_shard_size": "'"$gb"'",
              "max_age": "'"$days"'"
            }
          }
        },
        "delete": {
          "min_age": "'"$days2"'",
          "actions": {
            "delete": {
              "delete_searchable_snapshot": true
            }
          }
        }
      }
    }
   }'
   echo "Lifecycle policy changed ..."
}
#Menu
function show_options() {
   echo "Usage rseview:"
   echo ""
   echo "-h,--help                          		Display help"
   echo "-s,--search <search string> <buffer>  		Search through logging"
   echo "-v,--view <buffer>                   		View logging"
   echo "-l,--live <buffer>                    		View live logging"
   echo "-ls,--livesearch <search string> <buffer>  	Search through live logging"
   echo "-t,--testmessage                   		Send a test message"
   echo "-c,--clearlog					Clear log index"
   echo "-p,--lifecyclepolicy				Change lifecycle policy"
   echo "-ps,--pslifecyclepolicy                         View lifecycle policy"
   echo "-xi,--indexinfo                                 View indexes"
   echo "-xh,--healthinfo                                View elasticsearch health"
   echo "-u,--usage                                      View disk / ram usage"
   echo ""
}
#Options
case $1 in
-h|--help)
        show_options
        ;;
-s|--search)
	if [ -z "$2" ]; then
		echo "No search text found ..."
		exit
	else
		php -f $RSCONF/rseview.php q="$2" b=${3:-$default_buffer}
	fi
        ;;
-v|--view)
        php -f $RSCONF/rseview.php a=noquery b=${2:-$default_buffer}
        ;;
-l|--live)
        watch -c -n 1 "$RSCONF/rsbanner; php -f $RSCONF/rseview.php a=noquery b=${2:-$default_buffer}"
        ;;
-ls|--livesearch)
	if [ -z "$2" ]; then
        	echo "No search text found ..."
		exit
	else
		watch -c -n 1 "$RSCONF/rsbanner; php -f $RSCONF/rseview.php q="$2" b=${3:-$default_buffer}"
	fi
        ;;
-t|--testmessage)
        logger -n 127.0.0.1 -d 'This is a UDP test message!'; logger -T -P 514 -n 127.0.0.1 'This is a TCP test message!'
        echo "Sending UDP and TCP test message! Check logging!"
        ;;
-c|--clearlog)
        urlstatus="$(curl --fail --silent -XGET http://localhost:9200/_ilm/status -I | egrep 200)"
        if [[ $urlstatus =~ "200" ]]; then
               echo "Elasticsearch service is running ..."
        else
               echo "Elasticsearch not in time activated? Use CLI to setup the lifecycle ..."
               exit
        fi
        curl -XDELETE --header "Content-Type: application/json" http://localhost:9200/rse-syslog*?pretty=true
        echo "Recreate alias ..."
        curl -XPUT --header 'Content-Type: application/json' http://localhost:9200/rse-syslog-ng-000001?pretty -d '
        {
              "aliases": {
                  "rse-syslog":{
                     "is_write_index": true
                  }
              }
        }'
        echo "Send testmessage ..."
        logger -n 127.0.0.1 -d 'This is a UDP test message!'; logger -T -P 514 -n 127.0.0.1 'This is a TCP test message!'
        echo "Total logging archive cleared!"
        echo ""
        ;;
-p|--lifecyclepolicy)
        lc_policy
        echo ""
        ;;
-ps|--pslifecyclepolicy)
        lc_policy_rc
        echo ""
        ;;
-xi|--indexinfo)
        urlstatus="$(curl --fail --silent -XGET http://localhost:9200/_ilm/status -I | egrep 200)"
        if [[ $urlstatus =~ "200" ]]; then
               echo "Elasticsearch service is running ..."
        else
               echo "Elasticsearch not in time activated? Use CLI to setup the lifecycle ..."
               exit
        fi
        echo "Cluster index info:"
        curl --fail --silent -XGET --header 'Content-Type: application/json' http://localhost:9200/_cat/indices?v
        echo ""
        ;;
-xh|--healthinfo)
        urlstatus="$(curl --fail --silent -XGET http://localhost:9200/_ilm/status -I | egrep 200)"
        if [[ $urlstatus =~ "200" ]]; then
               echo "Elasticsearch service is running ..."
        else
               echo "Elasticsearch not in time activated? Use CLI to setup the lifecycle ..."
               exit
        fi
        echo "Cluster health info:"
        curl --fail --silent -XGET 'http://127.0.0.1:9200/_cluster/health/rse*?pretty'
        echo ""
        ;;
-u|--usage)
        usage
        echo ""
        ;;
        *)
        show_options
esac
